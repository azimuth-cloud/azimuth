<html metal:use-macro="load: base_template.pt" lang="en">
<section metal:fill-slot="content">

<h2>Server Details</h2>
<table class="table table-striped table-bordered">
    <tr><th>Server Name</th>    <td>${server['artifact_name']}</td></tr>
    <tr><th>Server UUID</th>    <td class="artifact-uuid">${server['artifact_uuid']}</td></tr>
    <tr><th>Server ID</th>      <td class="artifact_id">${server['artifact_id']}</td></tr>
    <tr><th>Server Created</th><td>
            <span class="create_dt">${server['create_dt']}</span>
            <a href="/docs#credit"></a></td>
    </tr>
    <tr><th>Last Change</th><td>
            <span class="change_dt">${server['change_dt']}</span>
            <a href="/docs#credit"></a></td>
    </tr>
    <tr><th>Current State</th><td>
            <span class="state">${server['state']}</span>
            <a href="/docs#credit"></a></td>
    </tr>
    <tr><th>Boost Status</th><td>
            <span class="boosted">${server['boosted']}</span>
            <a href="/docs#credit"></a></td>
    <tr><th>Cores / RAM</th><td>
            <span class="cores_slash_ram">${"%s / %s" % (server['cores'], server['ram'])}</span>
            <a href="/docs#credit"></a></td>
    </tr>
    <tr><th>Hours until deboost</th><td>
            <span class="boostremaining">${server['boostremaining']}</span>
            <a href="/docs#credit"></a></td>
    </tr>
</table>
<hr/>

<button class="btn btn-xs btn-success btn-start"
        type="button"
        id="btn-start"
        servername="${server['artifact_name']}">Start</button>
<button class="btn btn-xs btn-danger btn-stop"
        id="btn-stop"
        type="button"
        servername="${server['artifact_name']}">Stop</button>
<button class="btn btn-xs btn-info btn-restart"
        id="btn-restart"
        type="button"
        servername="${server['artifact_name']}">Restart</button>
<img src="/static/img/throbber.gif"
     id="throbber1"
     class="throbber">

<!-- Only show if server is unboosted -->
<button type="button" class="btn btn-xs btn-primary" id="show_boost_button"
        data-toggle="modal"
        server="${server['artifact_id']}"
        style="display: ${'none' if server['boosted']=='Boosted' else 'inline'}"
        data-target="#boostModal">Boost</button>

<!-- Only show if server is boosted -->
<button type="button" class="btn btn-xs btn-primary" id="show_extend_button"
        data-toggle="modal"
               server="${server['artifact_id']}"
        style="display: ${'inline' if server['boosted']=='Boosted' else 'none'}"
        data-target="#extendModal">Extend Boost</button>

<button type="button" class="btn btn-xs btn-primary" id="show_deboost_button"
        data-toggle="modal"
               data-target="#deboostModal"
               server="${server['artifact_id']}"
        style="display: ${'inline' if server['boosted']=='Boosted' else 'none'}"
               data-target="#deboostModal">De-Boost</button>



<div id="boostarea">
    <hr/>
    <div class="progress">
      <div class="progress-bar progress-bar-striped active"
           role="progressbar"
           aria-valuenow="45" aria-valuemin="0" aria-valuemax="100"
           style="width: 45%">
        <span class="sr-only">45% Complete</span>
      </div>
    </div>
    <hr/>
</div>

<!-- Hide this until it does something -->
<span style="display:none">
<h3>History&nbsp;<span class="glyphicon glyphicon-option-horizontal" aria-hidden="true"></span></h3>
<table class="table table-striped table-bordered">
    <tr><th>Date</th><th>Notes</th></tr>
    <tr><td>2000-01-01</td>
    <td>History viewing is not yet implemented.</td></tr>
</table>
</span>

<script>

    /* This is all we need to authenticate to the DB with our token. */
    $.ajaxSetup({
        beforeSend: function(xhr, settings) {
            if(settings.url.startsWith("${db_endpoint}"))
            {
                xhr.setRequestHeader("auth_tkt", "${token}");
            }
        }
    });

    function init_server_action(key, action) {
        var url = "${db_endpoint}/servers/" + key + '/' + action;
        console.log(action + ' ' + key);
        $('#throbber1').css({ opacity: 1 });

        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json"
        });
    }

    $('#btn-start').click(function() {
        init_server_action($(this).attr("servername"), 'Starting')
    });

    $('#btn-restart').click(function() {
        init_server_action($(this).attr("servername"), 'Restarting')
    });

    $('#btn-stop').click(function() {
        init_server_action($(this).attr("servername"), 'Stopping')
    });

    //Allow the user to pop up a modal dialog immediately by adding #xyz
    //to the end of the URL.
    $(document).ready(function() {
        if(window.location.hash)
        {
            $(window.location.hash).modal('show');
        }
    });


    (function poll(){
       setTimeout(function(){
          $.ajax({
              url: "${db_endpoint}/servers/${server['artifact_name']}",
              success: function(data){
                //console.log(data);

                /*state and boosted and change_dt can change*/
                var start_state = $(".state").text()
                //console.log("start_state=" + start_state + ", new_state=" + data['state'] )

                $(".state").text(data['state'])
                /* If state has changed, re-hide the throbber */
                if (start_state != data['state']) {
                    $('#throbber1').css({ opacity: 0 });
                }

                /* Now set other table rows that may change to new values */
                $(".boosted").text(data['boosted'])
                $(".change_dt").text(data['change_dt'])
		$(".cores_slash_ram").text(data['cores'] + ' / ' + data['ram'])

                /* Now show or hide the buttons as appropriate */
                if(data['boosted'] == "Boosted")
                {
                    $('#show_extend_button').css({ display: 'inline' });
                    $('#show_deboost_button').css({ display: 'inline' });
                    $('#show_boost_button').css({ display: 'none' });
                }
                else
                {
                    $('#show_extend_button').css({ display: 'none' });
                    $('#show_deboost_button').css({ display: 'none' });
                    $('#show_boost_button').css({ display: 'inline' });
                }

                poll();
              },
              dataType: "json",
              data: "actor_id=${logged_in}"});
          }, 5000);
    })();

</script>

<div class="modal fade" id="boostModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <h3 class="modal-title" id="boostmodaltitle">
            <span class="glyphicon glyphicon-signal" aria-hidden="true"></span>
            Boost Server
        </h3>
      </div>
      <div class="modal-body">
        <div class="alert alert-info" role="alert">
            <p><b>Boosting this server will temporarily increase the resources available to you.</b></p>
            <p>The duration for which you can boost the server will depend upon the number of credits
               available in your account.</p>
        </div>
        <hr>
        <form>
          <div class="form-group">
            <h4 id="boosttype">Boost Type - Big (8 Cores, 40GB RAM) @ 3 credit/hr</h4>
            <input type="range"  min="1" max="3" id="slidetype"/>
          </div>
          <div class="form-group">
            <h4>Duration</h4>
            <div class="col-md-8" style="padding-left:0px;padding-right:0px;">
                <input type="range"  min="0" max="100" id="slideduration">
            </div>
            <div class="col-md-4">
                <input type="number" size="4" maxlength="4" id="textduration"
                       style="width: 100px; height: 20px; font-size: 10px">
                &nbsp; hrs
            </div>
            <div class="col-md-12" id="timesummary" style="font-size: 10px; font-style: italic;">Time Here</div>
          </div>
        <p><br/><br/><i>This boost action will be automatically ended at <span id="endtime">00:00 on 00/00/0000</span>.
            Please note that the machine will be restarted at this time in order to make the change.</i></p>
        </form>
        <hr>

        <div class="alert alert-success" role="alert">
            <p>You currently have <b>${credit}</b> credits.</p>
            <p>This boost will cost <span id="boostcost">0</span> credits, leaving <span id="boostremain">0</span>
               for future use.</p>
         </div>
          <div class="modal-footer">
            <button class="btn btn-success btn-boost" type="button"
                    server="${server['artifact_id']}">Confirm Boost</button>
            <button class="btn btn-danger btn-boostcancel" >Cancel</button>

          </div>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="extendModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <h3 class="modal-title" id="boostmodaltitle">
            <span class="glyphicon glyphicon-signal" aria-hidden="true"></span>
            Extend Boost
        </h3>
      </div>
      <div class="modal-body">
        <div class="alert alert-warning" role="warning">
            <p><b>Extending a boost will increase the amount of time your server's boosted resources are available.</b></p>
            <p>The duration for which you can boost the server will depend upon the number of credits available
               in your account.</p>
        </div>
        <hr>
        <form>
          <div class="form-group">
            <h4>Extend for how long?</h4>
            <div class="col-md-8" style="padding-left:0px;padding-right:0px;">
                <input type="range"  min="0" max="100" id="slideextend">
            </div>
            <div class="col-md-4">
                <input type="number" size="4" maxlength="4" id="textextend"
                       style="width: 100px; height: 20px; font-size: 10px">&nbsp; hrs</div>
            <div class="col-md-12" id="extendtimesummary" style="font-size: 10px; font-style: italic;">&nbsp;</div>
          </div>
        <p><br/><br/><i>Your server is currently due to deboost on <span id="#deboostdt">xxxx</span>. 
               With the additional duration, this boost action will be automatically ended at 
               <b><span id="endtime">00:00 on 00/00/0000</span></b>. 
               Please note that the machine will be restarted at this time in order to make the change.</i></p>
        </form>
        <hr>
        <div class="alert alert-success" role="alert">
            <p>You currently have <b>${credit}</b> credits.</p>
            <p>This extension will cost <span id="extendcost">0</span> credits, leaving
            <span id="extendremain">0</span> for future use.</p>
         </div>
          <div class="modal-footer">
            <button class="btn btn-success btn-extendboost" type="button"
                    server="${server['artifact_id']}">Confirm Boost</button>
            <button class="btn btn-danger btn-extendboostcancel" >Cancel</button>
          </div>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="deboostModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <h3 class="modal-title" id="boostmodaltitle">
            <span class="glyphicon glyphicon-signal" aria-hidden="true"></span>
            De-Boost
        </h3>
      </div>
      <div class="modal-body">
        <div class="alert alert-danger" role="danger">
            <p><b><span class="glyphicon glyphicon-exclamation-sign"></span>&nbsp;Deboosting will
               immediately reset your VM and return it to the base configuration.</b></p>
            <p>You will be refunded any unused credits.</p>
        </div>
        <hr>
            <p>You currently have <b>${credit}</b> credits.</p>
            <p>This boost will return you <span id="deboostcost">0</span> credits, giving a total of
               <span id="deboostremain">0</span> for future use.</p><br/>
          <div class="modal-footer">
            <button class="btn btn-success btn-deboost" type="button"
                    server="${server['artifact_id']}">Confirm De-Boost</button>
            <button class="btn btn-danger btn-deboostcancel" >Cancel</button>
          </div>
      </div>
    </div>
  </div>
</div>

<script>

      // Deboost the system.  Calculation of refund and cancelling of Boost is now
      // handled on the database side.
      $('.btn-deboost').click(function() {

        $("#deboostModal").modal('hide');
        $('#throbber1').css({ opacity: 1 });
        //$("#boostarea").toggle();

        var url = "${db_endpoint}/servers/${server['artifact_name']}/Deboost";
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json"
        });

      });

      /* FIXME - unimplemented as yet */
      $('.btn-extendboost').click(function() {
          $("#extendModal").modal('hide');
      });


      // Schedule a deboost.  Most if the logic for this is now in eos_db
      $('.btn-boost').click(function() {

        //FIXME - should just pass the Boost level to the backend.
        var cores = 2;
        var ram = 40;

        if ($("input#slidetype").val() == 1) {
            cores = 2;
            ram = 40;
        }
        if ($("input#slidetype").val() == 2) {
            cores = 8;
            ram = 140;
        }
        if ($("input#slidetype").val() == 3) {
            cores = 16;
            ram = 400;
        }

        var hours = $('input#textduration').val()

        //Show the boost progress bar, which doesn't actually work yet
        //$("#boostarea").toggle();
        $('#throbber1').css({ opacity: 1 });

        var serverconfig = {ram : ram, cores : cores, hours : hours};
        // Set server to boost mode
        var url = "${db_endpoint}/servers/${server['artifact_name']}/Boost";
        $.ajax({
            type: 'POST',
            url: url,
            dataType: "json",
            data: serverconfig
        });

        //Hide the dialog
        $("#boostModal").modal('hide');

        //End of btn-boost function.
        });

        $('.btn-boostcancel').click(function() {
            $("#boostModal").modal('hide');
        });

        $('.btn-deboostcancel').click(function() {
            $("#deboostModal").modal('hide');
        });

        $('.btn-extendboostcancel').click(function() {
            $("#extendModal").modal('hide');
        });

        //FIXME - should be configurable
        $('#slidetype').change(function() {
            if ($("input#slidetype").val() == 1) {
                $("h4#boosttype").text("Boost Type - Standard+ (2 Cores, 40GB RAM) @ 1 credit/hr");
            }
            if ($("input#slidetype").val() == 2) {
                $("h4#boosttype").text("Boost Type - Big (8 Cores, 140GB RAM) @ 3 credit/hr");
            }
            if ($("input#slidetype").val() == 3) {
                $("h4#boosttype").text("Boost Type - Max (16 Cores, 400GB RAM) @ 12 credit/hr");
            }
        });

        //When the user moved the extend slider, do this.
        $('#slideextend').change(function() {
            update_extend_cost();
        });

        //When the user changes the level of boost wanted...
        $('#slidetype').change(function() {
            update_calcs();
        });

        //Or the duration...
        //Apparently this won't fire if I move it from the code.
        $('#slideduration').change(function() {
            update_calcs();
        });

        //Or sets duration directly...
        $('#textduration').change(function() {
            update_with_new_hours($(this).val());
        });

         $(document).ready(function() {
            update_calcs();
            update_extend_cost();
            update_deboost_cost();
        });


</script> <!-- purely because it helps Vim syntax hilighting -->
<script>
        //FIXME - this should be set from the configuration in eos-db.
        multiplier={"1":1,"2":3,"3":12};

        //Update sliders when new hours value is entered.
        //Called when the hours input is changed directly.
        function update_with_new_hours(duration) {
            var availabletime = $("input#slideduration").attr("max");

            //Ensure duration is not out-of-bounds or NaN
            duration = Math.round(duration);
            if(! duration >= 1) { duration = 1 }
            if(duration > availabletime) { duration = availabletime }

            $('input#textduration').val(duration);
            $('input#slideduration').val(exp_curve_reverse_transform(duration, availabletime));

            //Split duration into days and hours for display
            var hours = duration % 24;
            var days =  Math.floor(duration / 24);
            //console.log(days + " days, " + hours + " hours.");
            $('#timesummary').text(days + " days, " + hours + " hours.");

            //Calculate the cost.
            var credits_used = duration * multiplier[$("input#slidetype").val()];
            $('span#boostremain').text(${credit}-credits_used);
            $('span#boostcost').text(credits_used);
            $('span#endtime').text(get_future_date(duration));
        }

        // Works out the duration and cost of boost based on the two sliders.
        // Called when a slider is moved.
        function update_calcs() {
            //Simple calculation of max time = credit / rate used to set slider limits
            //on change of boost type.
            var availabletime = calculate_available_time($("input#slidetype").val());
            $("input#slideduration").attr("max", availabletime);

            //Convert to hours - we can't boost for fractional hours, so round it
            //and force the slider to the integer location.
            //console.log("slider moved to " + $('#slideduration').val() + " of " + $("input#slideduration").attr("max"));
            update_with_new_hours(exp_curve_transform($('#slideduration').val(), availabletime))
        }

        // We want a non-linear slider so as to allow us to set low numbers accurately
        // while still dialling up to high numbers.  Ben cam up with this:
        function exp_curve_transform(x, max) {
            // Transform values from a slider such that the maximum matches
            // the value emitted
            if (x >= max) { return max }
            if (x <= 0)   { return 1 }
            if (max < 10) { return x }  // This doesn't work well for small max values

            return Math.round(Math.exp(x * ( Math.log(max) / max ) ));
        }

        function exp_curve_reverse_transform(xdash, max) {
            // Reverse of above
            if (xdash >= max) { return max }
            if (xdash <= 1)   { return 0 }
            if (max < 10)     { return xdash }

            return Math.round(max * (Math.log(xdash) / Math.log(max)));
        }


        function update_deboost_cost() {
            // FIXME - this is clearly a placeholder.
            var credits_refunded = 35;
            $('span#deboostremain').text(${credit}+credits_refunded);
            $('span#deboostcost').text(credits_refunded);
        }

        //Function for working out cost of extension.  There is a very similar one
        //for initial boost.
        function update_extend_cost() {
            //Simple calculation of max time = credit / rate
            var availabletime = calculate_available_time($("input#slidetype").val());

            //Slider max is equal to max time
            $("input#slideextend").attr("max", availabletime);
            $('input#textextend').val($('#slideextend').val());
            var current_boost = 1;
            var credits_used = $('#slideextend').val() * multiplier[current_boost];
            $('span#extendremain').text(${credit}-credits_used);
            $('span#extendcost').text(credits_used);
            $('span#endtime').text(get_future_date($('#slideextend').val()));
            var hours = $('#slideextend').val() % 24;
            var days = ($('#slideextend').val() - hours) / 24;
            console.log($('#slideextend').val());
            console.log(days + " days, " + hours + " hours.");
            $('#extendtimesummary').text(days + " days, " + hours + " hours.");
        }

        //Calculate max boost we can have, given we can't have fractional hours.
        function calculate_available_time(boostlevel) {
            var credit = ${credit};
            return Math.floor(credit / multiplier[boostlevel]);
        }

        //JavaScript date handling is braindead.  Ben's original version only
        //worked in Firefox.
        var date_formatter = new Intl.DateTimeFormat('en-GB',
                {day: 'numeric', weekday: 'long', year: 'numeric', month: 'long',
                 hour: 'numeric', minute: 'numeric', hour12: false});

        //Return a date X hours in the future, as text.
        function get_future_date(added_hours) {
            var enddate = new Date();
            enddate.setTime(enddate.getTime() + (added_hours*60*60*1000));
            return date_formatter.format(enddate);
        }
  </script>

</section>
</html>
