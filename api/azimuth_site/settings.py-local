# SECURITY WARNING: DO NOT USE THIS IN PRODUCTION
SECRET_KEY = 'notsecret'


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ["*"]
USE_X_FORWARDED_HOST = True

# Use cookie names that don't conflict by default
CSRF_COOKIE_NAME = 'azimuth-csrftoken'
SESSION_COOKIE_NAME = 'azimuth-sessionid'


# Enable debug logging for rackit
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO'
    },
    'loggers': {
        'rackit.connection': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False
        }
    }
}


# Application definition
INSTALLED_APPS = [
    'django.contrib.staticfiles',
    'azimuth_auth',
    'azimuth',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'azimuth_auth.middleware.SessionTokenMiddleware',
    'azimuth.middleware.CleanupProviderMiddleware',
]

ROOT_URLCONF = 'azimuth_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'azimuth_site.wsgi.application'


# No databases
DATABASES = { }


# Internationalization
LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'Europe/London'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'


# Use cookie sessions so that we don't need a database
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'


REST_FRAMEWORK = {
    'VIEW_DESCRIPTION_FUNCTION': 'azimuth.views.get_view_description',
    'DEFAULT_AUTHENTICATION_CLASSES': ['azimuth.authentication.TokenHeaderAuthentication'],
    'UNAUTHENTICATED_USER': None,
}


AZIMUTH_AUTH = {
    'AUTHENTICATORS': [
        {
            # The name of the authenticator
            'NAME': 'password',
            # A human-readable name for the authenticator
            'LABEL': 'Username + Password',
            'AUTHENTICATOR': {
                # The authenticator factory to use
                'FACTORY': 'azimuth_auth.authenticator.openstack.PasswordAuthenticator',
                'PARAMS': {
                    # OpenStack auth URL
                    'AUTH_URL': 'https://keystone.cloud.example.com/v3',
                    # The OpenStack domain to use
                    'DOMAIN': 'default',
                    # Whether to verify SSL or not (default true)
                    'VERIFY_SSL': True
                },
            },
        },
        # {
        #     'NAME': 'appcred',
        #     'LABEL': 'Application Credential',
        #     'AUTHENTICATOR': {
        #         'FACTORY': 'azimuth_auth.authenticator.openstack.ApplicationCredentialAuthenticator',
        #         'PARAMS': {
        #             'AUTH_URL': OPENSTACK_AUTH_URL,
        #             'VERIFY_SSL': OPENSTACK_VERIFY_SSL,
        #         },
        #     },
        # },
    ],
}


AZIMUTH = {
    'AVAILABLE_CLOUDS': {
        'example': {
            'label': 'Example Cloud',
            'url': 'http://localhost:3000/tenancies',
        },
    },
    'CURRENT_CLOUD': 'example',

    # The cloud provider to use
    'PROVIDER': {
        # The provider factory to use (currently only OpenStack is supported)
        'FACTORY': 'azimuth.provider.openstack.Provider',
        'PARAMS': {
            # OpenStack auth URL
            'AUTH_URL': 'https://keystone.cloud.example.com/v3',
            # The OpenStack domain to use
            # 'DOMAIN': 'default',
            # CIDR to use for auto-created internal networks
            # Defaults to 192.168.3.0/24
            # 'INTERNAL_NET_CIDR': '10.100.100.0/24',
            # Map of availability zone to backdoor network
            # Required to connect storage networks in JASMIN managed tenancies
            # Can be omitted
            # 'AZ_BACKDOOR_NET_MAP': {
            #     'nova': '<backdoor network uuid>',
            # },
            # The type of NIC to use for the backdoor network
            # Set to 'direct' for SR-IOV support, or omit
            # 'BACKDOOR_VNIC_TYPE': 'direct',
        },
    },

    # Settings for app proxy support (optional)
    # 'APPS': {
    #     # Indicates if apps are enabled
    #     'ENABLED': True,
    #     # The base domain for the app proxy
    #     'BASE_DOMAIN': 'apps.cloud.example.com',
    #     # The address of the app proxy SSHD service
    #     # Defaults to the base domain if not given
    #     # 'SSHD_HOST': 'proxy.cloud.example.com',
    #     # The port for the app proxy SSHD service
    #     # Defaults to 22 (standard SSH port) if not given
    #     # 'SSHD_PORT': 32222,
    #     # The external URL of the app proxy registrar, as needed by clients
    #     # REGISTRAR_EXTERNAL_URL = "https://registrar.apps.cloud.example.com",
    #     # The admin URL of the app proxy registrar, for reserving subdomains
    #     # REGISTRAR_ADMIN_URL = "http://registrar.internal"
    # },

    # The SSH key store to use
    # The portal asks this store for the SSH key for a user
    # By default, it will use a key store that calls out to the configured provider
    # to store and retrieve keys natively
    # However if you already have users' SSH keys in an external system, e.g. LDAP, you can implement
    # the key store interface to fetch them
    # 'SSH_KEY_STORE': {
    #     'FACTORY': 'azimuth.keystore.provider.ProviderKeyStore',
    # },
}
