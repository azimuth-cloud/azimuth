{{- $settings := .Values.settings -}}
{{- $authenticators := .Values.authenticators -}}
{{- $provider := .Values.provider -}}
{{- $apps := .Values.apps -}}
{{- $clusterEngine := .Values.clusterEngine -}}
{{- $keyStore := .Values.sshKeyStore -}}
{{- $ingress := .Values.ingress }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "azimuth.componentname" (list . "api") }}
  labels: {{ include "azimuth.componentLabels" (list . "api") | nindent 4 }}
type: Opaque
stringData:
  01-django.yaml: |
    SECRET_KEY: {{ $settings.secretKey | default (randAlphaNum 64) }}
    DEBUG: {{ $settings.debug }}
    CSRF_COOKIE_SECURE: {{ $ingress.tls.enabled }}
    {{- with $settings.csrfCookieName }}
    CSRF_COOKIE_NAME: {{ . }}
    {{- end }}
    SESSION_COOKIE_SECURE: {{ $ingress.tls.enabled }}
    {{- with $settings.sessionCookieName }}
    SESSION_COOKIE_NAME: {{ . }}
    {{- end }}
    {{- with $settings.nextUrlCookieName }}
    AZIMUTH_AUTH:
      NEXT_URL_COOKIE_NAME: {{ . }}
    {{- end }}
  02-cloud-common.yaml: |
    AZIMUTH:
      AVAILABLE_CLOUDS:
        {{ $settings.currentCloud.name }}:
          label: {{ $settings.currentCloud.label }}
          {{- $proto := $ingress.tls.enabled | ternary "https" "http" }}
          url: {{ printf "%s://%s/tenancies" $proto $ingress.host }}
        {{- range $settings.availableClouds }}
        {{ .name }}:
          label: {{ .label | quote }}
          url: {{ .url | quote }}
        {{- end }}
      CURRENT_CLOUD: {{ $settings.currentCloud.name }}
      {{- with $settings.metrics }}
      METRICS:
        {{- with .cloudMetricsUrl }}
        CLOUD_METRICS_URL: {{ quote . }}
        {{- end }}
        {{- with .tenantMetricsUrlTemplate }}
        TENANT_METRICS_URL_TEMPLATE: {{ quote . }}
        {{- end }}
      {{- end }}
      {{- with $settings.documentationUrl }}
      DOCUMENTATION_URL: {{ quote . }}
      {{- end }}
      {{- with $settings.curatedSizes }}
      CURATED_SIZES: {{ toYaml . | nindent 8 }}
      {{- end }}
  03-cloud-authenticators.yaml: |
    {{- if empty $authenticators }}
    {{- fail "No authenticators are defined" }}
    {{- end }}
    AZIMUTH_AUTH:
      AUTHENTICATORS:
        {{- range $authenticators }}
        - NAME: {{ quote .name }}
          {{- with .label }}
          LABEL: {{ quote . }}
          {{- end }}
          AUTHENTICATOR:
            {{- if (eq .type "openstack-password") }}
            FACTORY: azimuth_auth.authenticator.openstack.PasswordAuthenticator
            PARAMS:
              AUTH_URL: {{ default $provider.openstack.authUrl .openstackPassword.authUrl }}
              DOMAIN: {{ default $provider.openstack.domain .openstackPassword.domain }}
              VERIFY_SSL: {{ default $provider.openstack.verifySsl .openstackPassword.verifySsl }}
            {{- else if (eq .type "openstack-application-credential") }}
            FACTORY: azimuth_auth.authenticator.openstack.ApplicationCredentialAuthenticator
            PARAMS:
              AUTH_URL: {{ default $provider.openstack.authUrl .openstackApplicationCredential.authUrl }}
              VERIFY_SSL: {{ default $provider.openstack.verifySsl .openstackApplicationCredential.verifySsl }}
            {{- else if (eq .type "openstack-federation") }}
            FACTORY: azimuth_auth.authenticator.openstack.FederatedAuthenticator
            PARAMS:
              AUTH_URL: {{ default $provider.openstack.authUrl .openstackFederation.authUrl }}
              {{- with .openstackFederation.provider }}
              PROVIDER: {{ . }}
              {{- end }}
              PROTOCOL: {{ required "protocol is required for openstack-federation" .openstackFederation.protocol }}
            {{- else }}
            {{- fail (printf "Unrecognised authenticator '%s'" .type) }}
            {{- end }}
        {{- end }}
  04-cloud-provider.yaml: |
    AZIMUTH:
      PROVIDER:
        {{- if (eq $provider.type "openstack") }}
        FACTORY: azimuth.provider.openstack.Provider
        PARAMS:
          AUTH_URL: {{ required "provider.openstack.authUrl is required" $provider.openstack.authUrl }}
          DOMAIN: {{ $provider.openstack.domain }}
          VERIFY_SSL: {{ $provider.openstack.verifySsl }}
          {{- with $provider.openstack.interface }}
          INTERFACE: {{ $provider.openstack.interface }}
          {{- end }}
          {{- with $provider.openstack.internalNetTemplate }}
          INTERNAL_NET_TEMPLATE: {{ . | quote }}
          {{- end }}
          {{- with $provider.openstack.externalNetTemplate }}
          EXTERNAL_NET_TEMPLATE: {{ . | quote }}
          {{- end }}
          CREATE_INTERNAL_NET: {{ $provider.openstack.createInternalNet }}
          {{- with $provider.openstack.internalNetCidr }}
          INTERNAL_NET_CIDR: {{ . | quote }}
          {{- end }}
        {{- else }}
        {{- fail (printf "Unrecognised cloud provider '%s'" $provider.type) }}
        {{- end }}
{{- if .Values.tags.apps }}
  05-apps.yaml: |
    # In order for the app authentication to work, the session cookie needs to apply to that domain
    # However we only do this if the portal host is within the apps domain
    # If not, we assume the Zenith installation is completely standalone with no auth
    {{- if hasSuffix $apps.baseDomain $ingress.host }}
    SESSION_COOKIE_DOMAIN: ".{{ $apps.baseDomain }}"
    {{- end }}
    # We also need to allow redirects to the apps
    AZIMUTH_AUTH:
      NEXT_URL_ALLOWED_DOMAINS:
        - {{ quote $apps.baseDomain }}
    AZIMUTH:
      APPS:
        ENABLED: true
        BASE_DOMAIN: {{ required "apps.baseDomain is required" $apps.baseDomain | quote }}
        VERIFY_SSL: {{ $apps.verifySsl }}
        VERIFY_SSL_CLIENTS: {{ $apps.verifySslClients }}
        SSHD_HOST: {{ required "apps.sshdHost is required" $apps.sshdHost | quote }}
        SSHD_PORT: {{ $apps.sshdPort }}
        REGISTRAR_EXTERNAL_URL: {{ required "apps.registrarExternalUrl is required" $apps.registrarExternalUrl | quote }}
        REGISTRAR_ADMIN_URL: {{ required "apps.registrarAdminUrl is required" $apps.registrarAdminUrl | quote }}
        {{- with $apps.postDeployScriptUrl }}
        POST_DEPLOY_SCRIPT_URL: {{ . | quote }}
        {{- end }}
{{- end }}
  06-ssh-key-store.yaml: |
    AZIMUTH:
      SSH_KEY_STORE:
        {{- if (eq $keyStore.type "provider") }}
        FACTORY: azimuth.keystore.provider.ProviderKeyStore
        {{- else if (eq $keyStore.type "dummy") }}
        FACTORY: azimuth.keystore.dummy.DummyKeyStore
        PARAMS:
          KEY: {{ $keyStore.dummy.key | required "No key specified" }}
        {{- else if (eq $keyStore.type "ldap") }}
        FACTORY: azimuth.keystore.ldap.LdapKeyStore
        PARAMS:
          PRIMARY: {{ $keyStore.ldap.primary }}
          REPLICAS: {{ toYaml $keyStore.ldap.replicas | nindent 8 }}
          BASE_DN: {{ $keyStore.ldap.baseDn }}
        {{- else }}
        {{- fail (printf "Unrecognised key store '%s'" $keyStore.type) }}
        {{- end }}
{{- if not .Values.tags.kubernetes }}
  07-disable-kubernetes.yaml: |
    AZIMUTH:
      CLUSTER_API_PROVIDER: null
{{- end }}
{{- if .Values.tags.clusters }}
{{- if (eq $clusterEngine.type "awx") }}
  08-awx.yaml: |
    AZIMUTH:
      AWX:
        ENABLED: true
        URL: {{ required "clusterEngine.awx.url is required" $clusterEngine.awx.url | quote }}
        VERIFY_SSL: {{ $clusterEngine.awx.verifySsl }}
        USERNAME: {{ $clusterEngine.awx.username }}
        CREATE_TEAMS: {{ $clusterEngine.awx.createTeams }}
        CREATE_TEAM_ALLOW_ALL_PERMISSION: {{ $clusterEngine.awx.createTeamAllowAllPermission }}
        {{- with $clusterEngine.awx.adminUsername }}
        ADMIN_USERNAME: {{ . }}
        {{- end }}
        {{- if $clusterEngine.terraformBackend.enabled }}
        {{- if (eq $clusterEngine.terraformBackend.type "consul") }}
        EXTRA_CREDENTIALS:
          - NAME: CaaS Consul
            TYPE: Hashicorp Consul
            INPUTS:
              address: {{ required "clusterEngine.terraformBackend.consul.address" $clusterEngine.terraformBackend.consul.address | quote }}
        {{- else }}
        {{- fail (printf "Unsupported terraform backend '%s'" $clusterEngine.terraformBackend.type) }}
        {{- end }}
        {{- end }}
        {{- with $clusterEngine.awx.executionEnvironment }}
        EXECUTION_ENVIRONMENT:
          IMAGE: {{ .image }}
          {{- if .alwaysPull }}
          ALWAYS_PULL: true
          {{- end }}
          {{- with .credentials }}
          CREDENTIALS:
            HOST: {{ .host }}
            USERNAME: {{ quote .username }}
            TOKEN: {{ quote .token }}
          {{- end }}
        {{- end }}
        {{- with $clusterEngine.awx.defaultProjects }}
        DEFAULT_PROJECTS:
          {{- range . }}
          - NAME: {{ .name | quote }}
            GIT_URL: {{ .gitUrl }}
            GIT_VERSION: {{ .gitVersion }}
            METADATA_ROOT: {{ .metadataRoot }}
            {{- if .alwaysUpdate }}
            ALWAYS_UPDATE: true
            {{- end }}
            {{- with .playbooks }}
            PLAYBOOKS: {{ toYaml . | nindent 14 }}
            {{- end }}
            {{- with .extraVars }}
            EXTRA_VARS: {{ toYaml . | nindent 14 }}
            {{- end }}
          {{- end }}
        {{- end }}
  09-awx-passwords.py: |
    import os
    # Read the AWX password from an environment variable that is populated from the specified secret
    AZIMUTH['AWX']['PASSWORD'] = os.environ['AWX_PASSWORD']
    if 'AWX_ADMIN_PASSWORD' in os.environ:
        AZIMUTH['AWX']['ADMIN_PASSWORD'] = os.environ['AWX_ADMIN_PASSWORD']
{{- else }}
{{- fail (printf "Unsupported cluster engine '%s'" $clusterEngine.type) }}
{{- end }}
{{- end }}
