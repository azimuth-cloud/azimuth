# Tags for optional features
tags:
  # Setting this tag to true enables apps via a Zenith app proxy
  apps: false
  # Setting this tag to true enables the Cluster-as-a-Service
  clusters: false

# Global variables used for defining things that need to span charts
global:
  # The ingress configuration
  ingress:
    # The base domain under which the portal and all exposed apps will live
    # There must be a common shared domain in order for the cookie authentication
    # to work between the Azimuth portal and applications exposed using Zenith
    baseDomain:
    # The subdomain that the portal will use
    portalSubdomain: portal
    # The subdomain that the Zenith registrar will use
    registrarSubdomain: registrar
    # The name of the ingress class to use
    className: nginx
    # Custom annotations for ingress resources, e.g. to specify cert-manager config
    annotations: {}
    # TLS configuration
    tls:
      # Indicates if TLS should be enabled
      enabled: true
      # The secret to use for the TLS certificate and key
      # If the secret already exists, it should contain a wildcard certificate for
      # the given base domain
      secretName:

api:
  image:
    repository: ghcr.io/stackhpc/azimuth-api
    pullPolicy: IfNotPresent
    tag: # Defaults to the chart appVersion
  imagePullSecrets: []
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  service:
    type: ClusterIP
    port: 80
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

ui:
  image:
    repository: ghcr.io/stackhpc/azimuth-ui
    pullPolicy: IfNotPresent
    tag: # Defaults to the chart appVersion
  imagePullSecrets: []
  replicaCount: 1
  podAnnotations: {}
  podSecurityContext: {}
  securityContext:
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
  service:
    type: ClusterIP
    port: 80
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

ingress:
  # The hostname to use for the portal
  host: "{{ include \"azimuth.ingress.defaultHost\" . }}"
  # The ingress class to use
  # This overrides the class specified in global if given
  # className:
  # Annotations for the portal ingress
  # These are combined with any annotations specified in global
  annotations: {}
  # TLS configuration for the portal ingress
  # This is merged with the global configuration
  tls: {}
    # Indicates if TLS should be enabled
    # enabled: true
    # The name of a secret containing the portal TLS certificate and key
    # secretName:

settings:
  # The Django secret key
  # If not given, a randomly generated key will be used
  # However this will be different on each deployment which may cause sessions to be terminated
  secretKey:
  # Use debug mode (recommended false in production)
  debug: false
  # The available clouds, in addition to this one
  availableClouds: []
    # - name: example
    #   label: 'Example Cloud'
    #   url: http://cloud.example.local/dashboard
  # The current cloud
  currentCloud:
    name: example
    label: Example

# The authenticator to use
# The parameters for the provider will be re-used where appropriate
authenticator:
  # The type of authenticator to use (currently only openstack-{password,federation} are supported)
  type: openstack-password
  # By default, the OpenStack password authenticator will use the parameters from
  # the OpenStack provider
  openstackPassword: {}
  # Parameters for the OpenStack federation authenticator
  openstackFederation:
    # The URL that should be used for the federated authentication
    federationUrl: https://keystone.cloud.example.local/v3/auth/OS-FEDERATION/websso/<authtype>

# The cloud provider to use
provider:
  # The type of provider to use (currently only openstack is supported)
  type: openstack
  # Parameters for the openstack provider
  openstack:
    # The Keystone authentication URL
    authUrl: https://keystone.cloud.example.local/v3
    # The domain to use
    domain: default
    # The OpenStack interface to use
    # Should rarely need to be changed from the default
    interface:
    # Whether or not to verify SSL
    verifySsl: true
    # The template to use for the name of the internal network
    # If this is given, then auto-created tenant internal networks are disabled
    # The fragment '{tenant_name}' is replaced with the current tenancy name, e.g.:
    #   internalNetTemplate: "{tenant_name}-private"
    internalNetTemplate:
    # The template to use for the name of the external network
    # As with internalNetTemplate above, the current tenancy name is interpolated into
    # the given template
    # If not given and there is exactly one external network available to a tenant then
    # that is used, otherwise an error is raised when operations requiring an external
    # network are attempted
    externalNetTemplate:
    # Indicates whether tenant internal networks should be auto-created if not present
    createInternalNet: true
    # The CIDR to use for auto-created tenant internal networks
    # Defaults to 192.168.3.0/24 if not given, which should be OK for most circumstances
    internalNetCidr:

# Configuration for the managed Consul instance
# See https://www.consul.io/docs/k8s/helm
consul: {}
  # Set this to false to disable the managed Consul instance
  # enabled: true

# Settings for the managed Zenith instance
zenith:
  # Set this to false to disable the managed Zenith instance
  # enabled: true
  # Prevent Zenith from deploying it's own Consul
  # We will deploy our own as we want to use it in other places as well
  consul:
    enabled: false
  registrar:
    config:
      reservedSubdomains: ["{{ .Values.global.ingress.portalSubdomain }}"]
    ingress:
      subdomain: "{{ .Values.global.ingress.registrarSubdomain }}"
  sync:
    config:
      kubernetes:
        ingress:
          # Configure Zenith ingress authentication to use Azimuth for authentication
          auth:
            url: "{{ include \"azimuth.auth.verifyUrl\" . }}"
            signinUrl: "{{ include \"azimuth.auth.signinUrl\" . }}"

# Settings for apps
# By default, this assumes that the managed Zenith is used
apps:
  # The base domain for apps
  # By default, the domain of the managed Zenith is used
  baseDomain: "{{ include \"azimuth.apps.baseDomain\" . }}"
  # The Zenith SSHD host
  # By default it attempts to infer the SSHD host for the managed Zenith
  sshdHost: "{{ include \"azimuth.apps.sshdHost\" . }}"
  # The Zenith SSHD port
  # By default it attempts to infer the SSHD port for the managed Zenith
  sshdPort: "{{ include \"azimuth.apps.sshdPort\" . }}"
  # The external URL for the Zenith registrar
  registrarExternalUrl: "{{ include \"azimuth.apps.registrarExternalUrl\" . }}"
  # The admin URL for the Zenith registrar
  registrarAdminUrl: "{{ include \"azimuth.apps.registrarAdminUrl\" . }}"
  # The URL of the post-deploy script to execute
  postDeployScriptUrl:

# The cluster engine to use for Cluster-as-a-Service support
clusterEngine:
  # The type of cluster engine to use (currently only AWX is supported)
  type: awx
  # Parameters for the awx cluster engine
  # By default, we use values that will work with the managed AWX
  awx:
    # The AWX or Ansible Tower URL
    # The URL is treated as a template when rendering resources
    url: http://{{ include "azimuth.componentname" (list . "awx-service") }}
    # Whether to verify SSL with the AWX/Tower API
    verifySsl: true
    # The username to use for the AWX/Tower API
    # This user must be at least an org admin for the CaaS organisation
    username: admin
    # The name of a secret to get the AWX password from
    # This is treated as a template when rendering resources
    # By default, this will be the admin password secret for the managed instance
    passwordSecretName: "{{ include \"azimuth.componentname\" (list . \"awx-admin-password\") }}"
    # Indicates whether teams should be created automatically
    createTeams: true
    # Indicates whether automatically-created teams should be granted access
    # to all cluster types
    createTeamAllowAllPermission: true
    # Indicates whether CaaS resources should be created in AWX
    createResources: true
    # Creating resources requires the admin user
    # If the user specified above is not a global admin, a separate admin username and
    # password secret should be specified
    adminUsername:
    adminPasswordSecretName:
    # Definition of the default projects and job templates.
    # By default, the StackHPC demo appliances will be used
    defaultProjects:
      # - # The name of the project (required)
      #   name: My Site Appliances
      #   # The git URL of the project (required)
      #   gitUrl: https://github.com/myorg/site-appliances.git
      #   # The branch, tag or commit id to use (required)
      #   gitVersion: master
      #   # The base URL for cluster metadata files (required)
      #   metadataRoot: https://raw.githubusercontent.com/myorg/site-appliances/master/ui-meta
      #   ##
      #   # OPTIONAL KEYS
      #   ##
      #   # Indicates if the project should be updated to the latest version on each job launch
      #   # Can be useful during development but recommend to leave as false in production
      #   # Defaults to false if not given
      #   alwaysUpdate: true
      #   # List of playbooks to create job templates for
      #   # If not given, a job template is created for each playbook in the project
      #   playbooks: ['cluster1-playbook.yml', 'cluster2-playbook.yml']
      #   # Map whose keys are the playbooks and whose values are maps of Ansible extra_vars for those playbooks
      #   extraVars:
      #     # This special key can be used to set common extra_vars for all playbooks in a project
      #     __ALL__: { var1: value1, var2: value2 }
      #     cluster1-playbook.yml: { var1: "override value1" }
      #   # (ADVANCED) Definition of a custom execution environment for the project
      #   executionEnvironment:
      #     # The image to use (required)
      #     image: registry.example.com/org/image:tag
      #     # Whether to re-pull the image each time it is required (defaults to false if not given)
      #     alwaysPull: true
  # Configuration for the Terraform backend
  terraformBackend:
    # Indicates if the Terraform backend should be configured
    enabled: true
    # The type of the Terraform backend to use (currently only consul is supported)
    type: consul
    # Configuration for the consul backend
    consul:
      # The address, including port, of the Consul server to use
      # By default, use the managed Consul
      address: "{{ .Release.Name }}-consul-server:8500"

# Configuration for the managed AWX instance
awx:
  # Indicates whether the managed AWX instance should be created
  # This only applies if the cluster engine is enabled with type AWX
  # enabled: true
  # The spec for the managed AWX instance
  spec:
    create_preload_data: false
    garbage_collect_secrets: true

# The SSH key store to use
# The portal asks this store for the SSH key for a user
sshKeyStore:
  # The type of key store to use (provider, dummy and ldap are supported)
  type: provider
  # Parameters for the dummy key store
  dummy:
    # The SSH public key to use
    key:
  # Parameters for the LDAP key store
  ldap:
    # The LDAP primary server
    primary: ldap://ldap.example.com
    # List of LDAP replica servers
    replicas: []
    # The base DN where users exist
    baseDn: OU=Users,DC=example,DC=com

# Properties for applying themes
theme:
  # The URL of the Bootstrap CSS to use (must be Bootstrap 5)
  bootstrapCssUrl: https://cdn.jsdelivr.net/npm/bootswatch@5.0.1/dist/pulse/bootstrap.min.css
  # Any custom CSS that should be included
  customCss:
  # For example, the following installs a custom logo in the top navbar in place of the cloud name
  # customCss: |
  #   .navbar-brand {
  #       background-image: url(<url of logo, which could be a data url>);
  #       background-size: auto 100%;
  #       background-repeat: no-repeat;
  #       width: <width that is required for logo to show properly in px>;
  #       text-overflow: hidden;
  #       color: rgb(0, 0, 0, 0) !important;
  #   }
