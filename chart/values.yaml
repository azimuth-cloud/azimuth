# Tags for optional features
tags:
  # Setting this tag to true enables apps via a Zenith app proxy
  apps: false
  # Setting this tag to true enables the Cluster-as-a-Service
  clusters: false
  # Setting this tag to false disables the Kubernetes support
  kubernetes: true

api:
  # The image to use for the api component
  image:
    repository: ghcr.io/stackhpc/azimuth-api
    pullPolicy: IfNotPresent
    tag: # Defaults to the chart appVersion
  imagePullSecrets: []
  # The number of replicas for the api deployment
  replicaCount: 1
  # Pod-level security context for the api component
  podSecurityContext:
    runAsNonRoot: true
  # Container-level security context
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # Service details for the api component
  service:
    type: ClusterIP
    port: 80
  # Resource requests and limits for the api containers
  resources: {}
  # Node selector for api pods
  nodeSelector: {}
  # Tolerations for api pods
  tolerations: []
  # Affinity rules for api pods
  affinity: {}

ui:
  # The image to use for the ui component
  image:
    repository: ghcr.io/stackhpc/azimuth-ui
    pullPolicy: IfNotPresent
    tag: # Defaults to the chart appVersion
  imagePullSecrets: []
  # The number of replicas for the ui deployment
  replicaCount: 1
  # Pod-level security context for the api component
  podSecurityContext:
    runAsNonRoot: true
  # Container-level security context
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
  # Service details for the ui component
  service:
    type: ClusterIP
    port: 80
  # Resource requests and limits for ui containers
  resources: {}
  # Node selector for ui pods
  nodeSelector: {}
  # Tolerations for ui pods
  tolerations: []
  # Affinity rules for ui pods
  affinity: {}

ingress:
  # The hostname to use for the portal
  host:
  # The ingress class to use
  className: nginx
  # Annotations for the portal ingress
  annotations: {}
  # TLS configuration for the portal ingress
  tls:
    # Indicates if TLS should be enabled
    enabled: true
    # The secret to use for the TLS certificate and key
    secretName:
    # TLS-specific ingress annotations, e.g. for cert-manager configuration
    annotations: {}

# The name of a configmap containing additional trusted CAs
# These will be merged with the default trusted CAs from certifi
trustBundleConfigMapName:

settings:
  # The Django secret key
  # If not given, a randomly generated key will be used
  # However this will be different on each deployment which may cause sessions to be terminated
  secretKey:
  # Use debug mode (recommended false in production)
  debug: false
  # The available clouds, in addition to this one
  availableClouds: []
    # - name: example
    #   label: 'Example Cloud'
    #   url: http://cloud.example.local/dashboard
  # The current cloud
  currentCloud:
    name: example
    label: Example
  # The name of the CSRF cookie
  csrfCookieName:
  # The name of the session cookie
  sessionCookieName:
  # The name of the next URL cookie
  nextUrlCookieName:

# The authenticator to use
# The parameters for the provider will be re-used where appropriate
authenticator:
  # The type of authenticator to use (currently only openstack-{password,federation} are supported)
  type: openstack-password
  # By default, the OpenStack password authenticator will use the parameters from
  # the OpenStack provider
  openstackPassword: {}
  # Parameters for the OpenStack federation authenticator
  openstackFederation:
    # The URL that should be used for the federated authentication
    federationUrl: https://keystone.cloud.example.local/v3/auth/OS-FEDERATION/websso/<authtype>

# The cloud provider to use
provider:
  # The type of provider to use (currently only openstack is supported)
  type: openstack
  # Parameters for the openstack provider
  openstack:
    # The Keystone authentication URL
    authUrl:
    # The domain to use
    domain: default
    # The OpenStack interface to use
    # Should rarely need to be changed from the default
    interface:
    # Whether or not to verify SSL
    verifySsl: true
    # The template to use for the name of the internal network
    # If this is given, then auto-created tenant internal networks are disabled
    # The fragment '{tenant_name}' is replaced with the current tenancy name, e.g.:
    #   internalNetTemplate: "{tenant_name}-private"
    internalNetTemplate:
    # The template to use for the name of the external network
    # As with internalNetTemplate above, the current tenancy name is interpolated into
    # the given template
    # If not given and there is exactly one external network available to a tenant then
    # that is used, otherwise an error is raised when operations requiring an external
    # network are attempted
    externalNetTemplate:
    # Indicates whether tenant internal networks should be auto-created if not present
    createInternalNet: true
    # The CIDR to use for auto-created tenant internal networks
    # Defaults to 192.168.3.0/24 if not given, which should be OK for most circumstances
    internalNetCidr:

# Settings for apps
apps:
  # The base domain for apps
  baseDomain:
  # Indicates whether SSL should be verified when determining whether a service is ready
  verifySsl: true
  # Indicates whether SSL should be verified by clients when associating keys with the
  # registrar using the external endpoint
  verifySslClients: true
  # The Zenith SSHD host
  sshdHost:
  # The Zenith SSHD port
  sshdPort: 22
  # The external URL for the Zenith registrar
  registrarExternalUrl:
  # The admin URL for the Zenith registrar
  registrarAdminUrl:
  # The URL of the post-deploy script to execute for web consoles
  postDeployScriptUrl:

# The cluster engine to use for Cluster-as-a-Service support
clusterEngine:
  # The type of cluster engine to use (currently only AWX is supported)
  type: awx
  # Parameters for the awx cluster engine
  # By default, we use values that will work with the managed AWX
  awx:
    # The AWX or Ansible Tower URL
    url:
    # Whether to verify SSL with the AWX/Tower API
    verifySsl: true
    # The username to use for the AWX/Tower API
    # This user must be at least an org admin for the CaaS organisation
    username: admin
    # The name of a secret to get the AWX password from
    passwordSecretName:
    # Indicates whether teams should be created automatically
    createTeams: true
    # Indicates whether automatically-created teams should be granted access
    # to all cluster types
    createTeamAllowAllPermission: true
    # Indicates whether CaaS resources should be created in AWX
    createResources: true
    # Creating resources requires the admin user
    # If the user specified above is not a global admin, a separate admin username and
    # password secret should be specified
    adminUsername:
    adminPasswordSecretName:
    # Definition of a custom execution environment for CaaS appliances
    executionEnvironment:
      # # The image to use for the execution environment (required)
      # image: registry.example.com/azimuth/caas-ee:<tag>
      # # Indicates if the image should be pulled for every job (defaults to false)
      # # This can be useful in development, but in production the recommended method is
      # # to set this to false and use immutable tags
      # alwaysPull: false
      # # Optional credentials if the image is in a private registry
      # credentials:
      #   # The registry host
      #   host: registry.example.com
      #   # The username to use to authenticate
      #   username: <user>
      #   # The token/password to use to authenticate
      #   token: <registry token>
    # Definition of the default projects and job templates.
    # By default, the StackHPC demo appliances will be used
    defaultProjects:
      # - # The name of the project (required)
      #   name: My Site Appliances
      #   # The git URL of the project (required)
      #   gitUrl: https://github.com/myorg/site-appliances.git
      #   # The branch, tag or commit id to use (required)
      #   gitVersion: master
      #   # The base URL for cluster metadata files (required)
      #   metadataRoot: https://raw.githubusercontent.com/myorg/site-appliances/master/ui-meta
      #   ##
      #   # OPTIONAL KEYS
      #   ##
      #   # Indicates if the project should be updated to the latest version on each job launch
      #   # Can be useful during development but recommend to leave as false in production
      #   # Defaults to false if not given
      #   alwaysUpdate: true
      #   # List of playbooks to create job templates for
      #   # If not given, a job template is created for each playbook in the project
      #   playbooks: ['cluster1-playbook.yml', 'cluster2-playbook.yml']
      #   # Map whose keys are the playbooks and whose values are maps of Ansible extra_vars for those playbooks
      #   extraVars:
      #     # This special key can be used to set common extra_vars for all playbooks in a project
      #     __ALL__: { var1: value1, var2: value2 }
      #     cluster1-playbook.yml: { var1: "override value1" }
  # Configuration for the Terraform backend
  terraformBackend:
    # Indicates if the Terraform backend should be configured
    enabled: true
    # The type of the Terraform backend to use (currently only consul is supported)
    type: consul
    # Configuration for the consul backend
    consul:
      # The address, including port, of the Consul server to use
      address:

# The SSH key store to use
# The portal asks this store for the SSH key for a user
sshKeyStore:
  # The type of key store to use (provider, dummy and ldap are supported)
  type: provider
  # Parameters for the dummy key store
  dummy:
    # The SSH public key to use
    key:
  # Parameters for the LDAP key store
  ldap:
    # The LDAP primary server
    primary: ldap://ldap.example.com
    # List of LDAP replica servers
    replicas: []
    # The base DN where users exist
    baseDn: OU=Users,DC=example,DC=com

# Properties for applying themes
theme:
  # The URL of the Bootstrap CSS to use (must be Bootstrap 5)
  bootstrapCssUrl: https://cdnjs.cloudflare.com/ajax/libs/bootswatch/5.1.3/pulse/bootstrap.min.css
  # Any custom CSS that should be included
  customCss: |
    @import url(/pulse-overrides.css);
  # For example, the following installs a custom logo in the top navbar in place of the cloud name
  # customCss: |
  #   .navbar-brand {
  #       background-image: url(<url of logo, which could be a data url>);
  #       background-size: auto 100%;
  #       background-repeat: no-repeat;
  #       width: <width that is required for logo to show properly in px>;
  #       text-overflow: hidden;
  #       color: rgb(0, 0, 0, 0) !important;
  #   }
