{% extends "templates/layout.jinja2" %}

{% block pagetitle %}Frequently Asked Questions{% endblock %}

{%- macro cedasupport(subject = 'ENTER QUERY HERE') %}
    <a href="mailto:support@ceda.ac.uk?subject=[CEDA-JASMIN/CEMS]:%20{{ subject|urlencode }}">CEDA support</a>
{%- endmacro %}

{% block content %}
<div class="row">
    <div class="col-md-12" id="faqs">
        <p>
            If the answer to your question is not here, please contact {{ cedasupport() }}.
        </p>

        <section>
            <header id="add-storage">
                <a class="pull-right" href="#" title="Back to top"><i class="fa fa-caret-up"></i> Back to top</a>
                <h3>How do I add extra storage to a virtual machine?</h3>
            </header>
            <p>
                There are two things that must be done to add extra storage to a virtual machine. The first
                is to attach a new virtual disk to the machine. On the machines page for your tenancy, click the
                <button class="btn btn-primary btn-xs" title="Reconfigure machine resources">
                    <i class="fa fa-fw fa-gears"></i>
                    <span class="sr-only">Reconfigure machine resources</span>
                </button>
                button - this will launch a dialog where a new disk can be added:
            </p>
            <div class="help-example-modal">
                <div class="modal" tabindex="-1" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="bootbox-close-button close"
                                        aria-hidden="true">×</button>
                                <h4 class="modal-title">Machine resources</h4>
                            </div>
                            <div class="modal-body">
                                <div class="bootbox-body">
                                    <ul class="nav nav-tabs" role="tablist">
                                        <li role="presentation">
                                            <a href="javascript:;" aria-controls="cpu-ram" role="tab">CPU &amp; RAM</a>
                                        </li>
                                        <li role="presentation" class="active">
                                            <a href="javascript:;" aria-controls="hard-disks" role="tab">Hard disks</a>
                                        </li>
                                    </ul>

                                    <div class="tab-content">
                                        <div role="tabpanel" class="tab-pane active">
                                            <div class="row">
                                                <div class="col-md-10 col-md-offset-1">
                                                    <table class="table table-striped">
                                                        <thead>
                                                            <tr>
                                                                <th>Name</th>
                                                                <th>Size</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            <tr>
                                                                <td style="white-space : nowrap;"><code>Hard disk 1</code></td>
                                                                <td style="white-space : nowrap;">20 GB</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td style="white-space : nowrap; vertical-align : middle;">
                                                                    <label for="disk-size">Add a new disk</label>
                                                                </td>
                                                                <td>
                                                                    <div class="form-group">
                                                                        <div class="input-group">
                                                                            <input class="form-control" name="disk-size" type="number" min="1" step="1" placeholder="Size of disk">
                                                                            <div class="input-group-addon">GB</div>
                                                                        </div>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <button title="Add disk" class="btn btn-success">
                                                                        <i class="fa fa-fw fa-plus"></i>
                                                                        <span class="sr-only">Add disk</span>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <p>
                Once the new disk has been successfully added, power the machine on. The new disk will be visible
                to the machine, but will not be usable. This can be verified using the <code>lsblk</code> command:
            </p>
            <pre>
<b>$ lsblk</b>
NAME                         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda                            8:0    0    32G  0 disk
├─sda1                         8:1    0   243M  0 part /boot
├─sda2                         8:2    0     1K  0 part
└─sda5                         8:5    0  15.8G  0 part
  ├─ubuntu--vg-root (dm-0)   252:0    0  13.8G  0 lvm  /
  └─ubuntu--vg-swap_1 (dm-1) 252:1    0     2G  0 lvm  [SWAP]
sdb                            8:16   0    16G  0 disk
sr0                           11:0    1  1024M  0 rom
</pre>
            <p>
                Here, we can see that the operating system is recognising the new disk (<code>sdb</code>), but
                there are no partitions or filesystems associated with it. There are two options for making
                the disk usable:
            </p>
            <ol>
                <li>Add a new filesystem to the disk and mount it somewhere (e.g. <code>/data</code>)</li>
                <li>Use <a href="https://en.wikipedia.org/wiki/Logical_Volume_Manager_(Linux)" target="blank">LVM</a> to extend the root (i.e. <code>/</code>) filesystem</li>
            </ol>
            <p>The simplest option is the first, an example of which is shown here:</p>
            <pre>
<span class="text-muted"># Create a single partition spanning the whole disk</span>
<b>$ fdisk /dev/sdb</b>
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel
Building a new DOS disklabel with disk identifier 0x598d636f.
Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.

Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)

Command (m for help): <b>n</b>
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 1):
Using default value 1
First sector (2048-33554431, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-33554431, default 33554431):
Using default value 33554431

Command (m for help): <b>w</b>
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.

<span class="text-muted"># Verify that the partition was created</span>
<b>$ lsblk /dev/sdb</b>
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
sdb      8:16   0  16G  0 disk
└─sdb1   8:17   0  16G  0 part

<span class="text-muted"># Create a filesystem on the partition</span>
<b>$ mkfs.ext4 /dev/sdb1</b>
mke2fs 1.42.9 (4-Feb-2014)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
1048576 inodes, 4194048 blocks
209702 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=4294967296
128 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
	4096000

Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done

<span class="text-muted"># Mount the filesystem</span>
<b>$ mkdir /data</b>
<b>$ mount /dev/sdb1 /data</b>

<span class="text-muted"># Verify that the filesystem is now available</span>
<b>$ lsblk</b>
NAME                         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda                            8:0    0    32G  0 disk
├─sda1                         8:1    0   243M  0 part /boot
├─sda2                         8:2    0     1K  0 part
└─sda5                         8:5    0  15.8G  0 part
  ├─ubuntu--vg-root (dm-0)   252:0    0  13.8G  0 lvm  /
  └─ubuntu--vg-swap_1 (dm-1) 252:1    0     2G  0 lvm  [SWAP]
sdb                            8:16   0    16G  0 disk
└─sdb1                         8:17   0    16G  0 part /data
sr0                           11:0    1  1024M  0 rom
<b>$ df -h</b>
Filesystem                   Size  Used Avail Use% Mounted on
udev                         990M  4.0K  990M   1% /dev
tmpfs                        201M  676K  200M   1% /run
/dev/mapper/ubuntu--vg-root   14G  1.5G   12G  12% /
none                         4.0K     0  4.0K   0% /sys/fs/cgroup
none                         5.0M     0  5.0M   0% /run/lock
none                        1001M     0 1001M   0% /run/shm
none                         100M     0  100M   0% /run/user
/dev/sda1                    236M   41M  183M  19% /boot
/dev/sdb1                     16G   44M   15G   1% /data
</pre>
            <p>
                In order to make the mount permanent (so that it is automatically mounted on reboot),
                you must also add an entry to <code>/etc/fstab</code>.
            </p>
        </section>

        <section>
            <header id="no-external-ips">
                <a class="pull-right" href="#" title="Back to top"><i class="fa fa-caret-up"></i> Back to top</a>
                <h3>Why are there no external IP addresses available for a virtual machine?</h3>
            </header>

            <p>
                Each tenancy in the JASMIN Cloud gets a fixed number of external IP addresses, usually four.
                One is used for outgoing traffic from internal machines in a tenancy, with the remainder
                available to be used as unique external IP addresses for machines. Once they are all used,
                no more machines can be exposed to incoming traffic from the internet. However, you can
                provision as many machines on the internal network as the tenancy quota allows.
            </p>
            <p>
                A typical tenancy containing a web-based service would be something like:
            </p>
            <ul>
                <li>Internal shared infrastructure machines, e.g. LDAP server, NFS server - outbound traffic only on IP 1</li>
                <li><a href="http://blog.scottlowe.org/2015/11/21/using-ssh-bastion-host/" target="blank">SSH bastion</a> / login machine - exposed on IP 2</li>
                <li>Production web server - exposed on IP 3</li>
                <li>Test web server - exposed on IP 4</li>
            </ul>
            <p>
                So four external IP addresses is usually sufficient for a tenancy containing a web service.
                It is possible to request additional external IP addresses by contacting
                {{ cedasupport('Additional external IPs') }}, but tenants are encouraged to consider other
                solutions first. For example, if you need to run multiple related web services from the same
                tenancy, consider using a proxy server to host the services on the same IP address.
            </p>
        </section>

        <section>
            <header id="create-template">
                <a class="pull-right" href="#" title="Back to top"><i class="fa fa-caret-up"></i> Back to top</a>
                <h3>How do I create a reusable template from a running virtual machine?</h3>
            </header>

            <p>
                It is possible to take a running virtual machine and create a template from it that can then
                be used to provision new machines. However before doing this, you should consider whether
                it is really what you need. In the majority of cases, where what you really want is a
                repeatable deployment process for your service, it is often better to use a system for
                automated deployment such as <a href="http://www.ansible.com/" target="blank">Ansible</a>,
                <a href="https://www.chef.io/chef/" target="blank">Chef</a> or
                <a href="https://puppetlabs.com/" target="blank">Puppet</a>. These systems allow you to
                provision a new machine from a standard template (such as the standard CentOS or Ubuntu
                templates in the JASMIN Cloud) and run an automated process on the new machine to deploy
                your service. You also get many other nice benefits - for example, you can version control
                the files defining your deployment process, and you can easily take your deployment to a
                different platform or use the same process to deploy local test sandboxes using
                <a href="https://www.virtualbox.org/" target="blank">VirtualBox</a> and
                <a href="https://www.vagrantup.com/" target="blank">Vagrant</a>.
            </p>
            <p>
                Another reason you may want to consider using an automated deployment system is that
                custom templates count towards the storage quota for your tenancy - quota that could otherwise
                be allocated to virtual machines! A template takes up at least as much space as the size of the
                disks attached to the machine it was created from. For example, if you create a template from a
                machine with a 100GB disk, the resulting template will consume at least 100GB of your
                storage quota. For this reason it is recommended to create templates from machines with as
                little storage attached as possible.
            </p>
            <p>
                In order to create a reusable template, a machine must be prepared appropriately.
                Unfortunately, it is not possible for the portal to check whether a machine has been prepared
                correctly - the portal will still create a template from an un-prepared machine, but machines
                provisioned using the template may exhibit strange behaviour (e.g. unpredictable networking
                issues). Also, the process of creating a template destroys the source machine, so care should
                be taken.
            </p>
            <p>
                To prepare a machine to become a reusable template, the only thing that is <em>required</em>
                is to run the script at <code>/root/vappclean.sh</code>. This script does things that are
                necessary from a system point-of-view to ensure machines deployed from the template
                behave nicely, but also renders the machine virtually unusable for anything other than
                creating a template. Amongst other things, it will:
            </p>
            <ul>
                <li>Clean out system caches (e.g. for the package manager)</li>
                <li>Remove any log files, temp files or history files</li>
                <li>Remove any SSH host keys - this ensures that new host keys are generated for any
                    machines provisioned from the template</li>
                <li>Remove the hardware ID from any network interfaces to allow the operating system
                    to use the same interfaces for new virtual network cards</li>
            </ul>
            <p>
                However, from an application point-of-view, there may be other things you want to do to create
                a fully reusable template from a machine. For example, if you are trying to create a reusable
                template for a web service, you may want to remove machine specific configurations such as
                SSL private keys before creating a template.
            </p>
        </section>
    </div>
</div>

{#- Use Javascript to generate a table of contents #}
<script type="text/template" id="toc-template">
    <div class="toc">
        <ul>
            <% _.each(questions, function(question) { %>
                <li><a href="#<%= question.id %>"><%= question.text %></a></li>
            <% }); %>
        </ul>
    </div>
</script>
<script type="text/javascript">
$('#faqs').prepend(
    _.template($('#toc-template').html())({
        questions : $('#faqs header').map(function() {
            var $this = $(this);
            return {
                id   : $this.attr('id'),
                text : $this.find('h3').text()
            }
        })
    })
);
</script>
{% endblock %}
